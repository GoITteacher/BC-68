/**
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª,
 * —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É
 * —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
 * –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
 *
 * –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑
 * —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 - Ajax.
 */
/* function logItems(items) {
  for (let i = 0; i < items.length; i++) {
    const str = `${i + 1} - ${items[i]}`;
    console.log(str);
  }
}

logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']); */
/**
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å
 * —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
 * names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
 * —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö
 * –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
 * –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
 */
/* function printInfo(names, phones) {
  names = names.split(','); 
  phones = phones.split(',');

  for (let i = 0; i < names.length; i++) {
    const str = `${names[i]} - ${phones[i]}`;
    console.log(str);
  }
}

printInfo(
  'Jacob,William,Solomon,Artemis',
  '89001234567,89001112233,890055566377,890055566300',
); */
/**
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes) —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è
 * minutes (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω
 * —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH:MM.
 */
/* function formatTime(mins) {
  let hours = Math.floor(mins / 60);
  let minutes = mins % 60;

  hours = `${hours}`.padStart(2, '0');
  minutes = `${minutes}`.padStart(2, '0');

  // hours = hours.toString().padStart(2, '0');
  // minutes = minutes.toString().padStart(2, '0');

  const str = `${hours}:${minutes}`;
  return str;
}

console.log(formatTime(70)); // "01:10"
console.log(formatTime(450)); // "07:30"
console.log(formatTime(1441)) */
// "24:01"
// ============================================
/* const str = 'Hello World test some words';

const result = str.split('o');

console.log(result);
 */
// ====================

// ==============================================
//                      SORT
// ==============================================

/* function sort(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = i; j < arr.length; j++) {
      if (arr[j] < arr[i]) {
        const temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
      }
    }
  }

  console.log(arr);
}

sort([1, 3.13, 5.753, 5.232, 8, 3.533, 1]); */

// ================================================

// const str = '(()){{[()({})]}}{()}'
/* 
function task1(str) {
  const result = [];

  for (const elem of str) {
    if ('[{('.includes(elem)) {
      result.push(elem);
    } else {
      const lastElem = result.pop();

      switch (elem) {
        case ')':
          if (lastElem !== '(') return false;
          break;
        case ']':
          if (lastElem !== '[') return false;
          break;
        case '}':
          if (lastElem !== '{') return false;
          break;
      }
    }
    console.log(result.join(''));
  }

  if (result.length > 0) return false;

  return true;
}

console.log(task1('{{([])}}(')); */

// =========================

function task2(str) {
  if (str.length % 2 !== 0) return false;

  const result = [];
  for (const elem of str) {
    if (elem === '(') {
      result.push(elem);
    } else {
      result.pop();
    }
  }

  return result.length === 0;
}

console.log(task2('()(((())'));
